#!/usr/bin/env python3
"""
emotion_report_generator.py
---------------------------
Generates formatted markdown emotion analysis reports.
"""

from datetime import datetime
from typing import Dict, List, Tuple
from statistics import mean

def generate_emotion_report(
    file_name: str,
    scores: List,
    val_roll: List[float], 
    emo_roll: Dict[str, List[float]],
    summary,
    window_size: int = 5
) -> str:
    """Generate a formatted markdown emotion analysis report."""
    
    # Get current date
    date_str = datetime.now().strftime("%B %d, %Y")
    
    # Find peaks for each emotion
    emotion_peaks = {}
    for emotion, values in emo_roll.items():
        if values and max(values) > 0:
            max_val = max(values)
            max_idx = values.index(max_val)
            emotion_peaks[emotion] = {
                'peak_value': max_val,
                'sentence_index': max_idx + 1  # 1-based indexing for report
            }
        else:
            emotion_peaks[emotion] = {
                'peak_value': 0.0,
                'sentence_index': 'N/A'
            }
    
    # Find valence progression highlights
    valence_min = min(val_roll) if val_roll else 0
    valence_max = max(val_roll) if val_roll else 0
    valence_min_idx = val_roll.index(valence_min) + 1 if val_roll and valence_min in val_roll else 'N/A'
    valence_max_idx = val_roll.index(valence_max) + 1 if val_roll and valence_max in val_roll else 'N/A'
    
    # Generate emotional arc description
    arc_description = describe_emotional_arc(val_roll, emo_roll)
    
    report = f"""# Emotion Arc Analysis Report

## File Analyzed
**File Name**: {file_name}
**Date**: {date_str}

## Summary Statistics
- **Total Sentences**: {summary.sentences}
- **Average Valence**: {summary.avg_valence}
- **Top Emotions**: {', '.join(summary.top_emotions)}

## Emotional Progression
{arc_description}

## Rolling Window Analysis
- **Window Size**: {window_size}

### Valence Highlights
- **Most Positive Moment**: {valence_max:.2f} (Sentence {valence_max_idx})
- **Most Negative Moment**: {valence_min:.2f} (Sentence {valence_min_idx})

### Emotional Trends
| Emotion       | Peak Value | Sentence Index |
|---------------|------------|----------------|"""

    # Add emotion trend rows
    for emotion in ['Joy', 'Sadness', 'Anger', 'Fear', 'Trust', 'Disgust', 'Surprise', 'Anticipation']:
        emotion_key = emotion.lower()
        peak_info = emotion_peaks.get(emotion_key, {'peak_value': 0.0, 'sentence_index': 'N/A'})
        peak_val = peak_info['peak_value']
        sentence_idx = peak_info['sentence_index']
        
        if peak_val > 0:
            report += f"\n| {emotion:<13} | {peak_val:<10.2f} | {sentence_idx:<14} |"
        else:
            report += f"\n| {emotion:<13} | {'0.00':<10} | {'N/A':<14} |"

    report += f"""

---

### Key Emotional Moments
"""

    # Add key moments based on peaks
    key_moments = []
    for emotion, info in emotion_peaks.items():
        if info['peak_value'] > 0.15:  # Significant peaks only
            key_moments.append(f"- **{emotion.title()}**: Peak intensity at sentence {info['sentence_index']} (value: {info['peak_value']:.2f})")
    
    if key_moments:
        report += "\n" + "\n".join(key_moments)
    else:
        report += "\nNo significant emotional peaks detected (all values below 0.15 threshold)."

    report += f"""

### Explanation of the Report
- **Rolling Window**: A technique to smooth out fluctuations by averaging values over a set number of sentences. This highlights overarching patterns and arcs in the text.
- **Summary Statistics**: Provides an overview of the text, including the total number of sentences, average emotional tone (valence), and the most frequently detected emotions.
- **Emotional Trends**: Identifies the peak value and the sentence index where each emotion was most prominent, helping to pinpoint key moments in the text.
- **Valence**: Measures overall positive (+) or negative (-) emotional tone.

**Generated by Chapter Emotion Arc Tool** - {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}
"""
    
    return report


def describe_emotional_arc(val_roll: List[float], emo_roll: Dict[str, List[float]]) -> str:
    """Generate a narrative description of the emotional arc."""
    
    if not val_roll or len(val_roll) < 3:
        return "Insufficient data for emotional arc analysis."
    
    # Analyze valence progression
    start_val = mean(val_roll[:len(val_roll)//3]) if val_roll[:len(val_roll)//3] else 0
    mid_val = mean(val_roll[len(val_roll)//3:2*len(val_roll)//3]) if val_roll[len(val_roll)//3:2*len(val_roll)//3] else 0
    end_val = mean(val_roll[2*len(val_roll)//3:]) if val_roll[2*len(val_roll)//3:] else 0
    
    # Determine overall arc
    if start_val < mid_val and mid_val > end_val:
        arc_type = "rise and fall"
    elif start_val > mid_val and mid_val < end_val:
        arc_type = "fall and rise"
    elif end_val > start_val + 0.1:
        arc_type = "upward trajectory"
    elif end_val < start_val - 0.1:
        arc_type = "downward trajectory"
    else:
        arc_type = "relatively stable"
    
    # Find dominant emotion
    emotion_totals = {emotion: sum(values) for emotion, values in emo_roll.items()}
    dominant_emotion = max(emotion_totals, key=emotion_totals.get) if emotion_totals else "none"
    
    description = f"The text follows a **{arc_type}** emotional pattern. "
    
    if dominant_emotion != "none" and emotion_totals[dominant_emotion] > 0:
        description += f"**{dominant_emotion.title()}** is the dominant emotion throughout the narrative. "
    
    # Add valence interpretation
    if abs(start_val - end_val) > 0.2:
        if end_val > start_val:
            description += "The overall tone becomes more positive as the text progresses."
        else:
            description += "The overall tone becomes more negative as the text progresses."
    else:
        description += "The emotional tone remains relatively consistent throughout."
    
    return description


if __name__ == "__main__":
    # Test with sample data
    import sys
    sys.path.append('../../tools')
    from chapter_emotion_arc import analyze
    
    sample_text = "I was happy but then became afraid. The horror was overwhelming. Finally, hope returned."
    scores, val_roll, emo_roll, summary = analyze(sample_text, 2)
    
    report = generate_emotion_report("test.txt", scores, val_roll, emo_roll, summary)
    print(report)